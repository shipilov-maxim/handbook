from starlette.middleware.base import BaseHTTPMiddleware
from fastapi.responses import JSONResponse
from sqlalchemy.exc import IntegrityError
import traceback


class CatchExceptionsMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request, call_next):
        try:
            print(f"REQUEST: {request.method} {request.url}", flush=True)
            return await call_next(request)

        except IntegrityError as e:
            if "foreign key constraint" in str(e.orig).lower():
                return JSONResponse(status_code=404, content={"detail": "–°–≤—è–∑–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"})
            elif "unique constraint" in str(e.orig).lower():
                return JSONResponse(status_code=409, content={"detail": "–ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"})
            else:
                return JSONResponse(status_code=400, content={"detail": "–û—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"})

        except ValueError as e:
            return JSONResponse(status_code=400, content={"detail": str(e)})

        except Exception:
            print("üî• Exception caught:", traceback.format_exc(), flush=True)
            return JSONResponse(status_code=500, content={"detail": "Internal Server Error"})
